import pandas as pd
import requests
import os
from datetime import datetime

# Set start time
startTime = datetime.now()

# File request
print("Enter Filepath or URL:")
fp = input()
#Cleans up a standard filepath - reverses slashes, removes double quotes, and gsheets URL formatting
fp = fp.replace("\\","/").replace("\"","").replace("edit?pli=1#gid","export?format=csv&gid").replace("edit#gid","export?format=csv&gid")

# Create dataFrame dependent on file type
if "xlsx" in fp:
    df = pd.read_excel(fp)
    fty = "xlsx"
elif "docs.google" in fp:
    df = pd.read_csv(fp)
    fty = "sheet"
elif "csv" in fp:
    df = pd.read_csv(fp)
    fty = "csv"
else:
    print("Invalid File Type")
    
# Clean website homepage
def clean(x):
    return (x.replace("https://","").replace("http://","").replace("www.","").replace(".com/",".com")).lower()
df['Clean'] = df[list(df.columns)[0]].apply(clean)

# Create list with each protocol and www combo
def status(x):
    ver = ['http://' + x,'https://' + x,'http://www.' + x,'https://www.' + x]
    list = []
    for i in range(len(ver)):
        x = ver[i]
        try:
            z = requests.head(x).status_code
        except:
            pass
        list.append(x + ": " + str(z))
    return list
df['Versions and Status'] = df['Clean'].apply(status)

# Display the URLs that return a 200
def canon(x):
    ver = ['http://' + x,'https://' + x,'http://www.' + x,'https://www.' + x]
    list = []
    for i in range(len(ver)):
        x = ver[i]
        try:
            z = requests.head(x).status_code
        except:
            pass
        if z == 200:
            list.append(x)
        else:
            pass 
    return list
df['Canonical'] = df['Clean'].apply(canon)

# Count the length of the canonical list
def count(x):
    try:
        return len(x)
    except:
        return 0
df['Count'] = df['Canonical'].apply(count)

# Set status based on length of list, 1 = Good
def state(x):
    if x == 1:
        return "Good"
    elif x == 9:
        return "Timed out"
    elif x > 1:
        return "Multiple Resolving URLs"
    elif x == 0:
        return "No Canonical URL"
    else:
        pass
df['Status'] = df['Count'].apply(state)


df = df.drop(columns=['Clean','Count'])

df = df.sort_values(by=['Status'], ascending = False)

print(df)

# How long did the script take to run?
print("\n" + "Time to Run: " + str(datetime.now() - startTime))

# Writes new .csv file
print("\n" + "Export? (y/n)")
exp = input()
if exp == "y":
    if fty == "xlsx":
        df.to_csv(os.path.dirname(fp)+"/" + os.path.basename(fp).replace(".xlsx","") + " - Protocol + Sub Checked.csv")
        pass
    elif fty == "csv":
        df.to_csv(os.path.dirname(fp)+"/" + os.path.basename(fp).replace(".csv","") + " - Protocol + Sub Checked.csv")
        pass
    elif fty == "sheet":
        print("\n" + "Enter File Name:")
        fn = input()
        path = os.path.join(os.path.expanduser("~"), "Desktop", fn + " - Protocol + Sub Checked.csv")
        df.to_csv(path)
        pass
    else:
        pass
else:
    pass

# https://docs.google.com/spreadsheets/d/1Pp6lv-jO-Yo_3EZOgkXWdmdaTDj_BIZP2RmUCqWqre0/edit#gid=0
